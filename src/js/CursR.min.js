var _CursR_=function(){this.peerId=this.lastPeerId=this.peer=null;this.connected=!1;this.conn=null;this.joined=this.userClosedConn=!1;this.onErrorStatusUpdate=this._onWarningStatusUpdate=this._onDebugStatusUpdate=this._onError=this._onWarning=this._onDebug=this._onDisconnected=this._onConnectionClosed=this._onPeerDataReceived=null};_CursR_.prototype.disconnect=function(){this.peer&&(this.userClosedConn=!0,this.peer.disconnect())};
_CursR_.prototype.initReceiver=function(a){this.peer=new Peer(a,{debug:2});this.peer.on("open",function(a){null===this.peer.id?(this.onDebug("Received null id from peer open"),this.peer.id=this.lastPeerId):this.lastPeerId=this.peer.id;this.onDebug("ID: "+this.peer.id);this.connected=!0;this.onDebug("Awaiting connection...");this.onDebugStatusUpdate("Awaiting connection...")});this.peer.on("connection",function(a){if(this.conn&&this.conn.open)a.on("open",function(){a.send("Already connected to another client");
setTimeout(function(){a.close()},500)});else this.conn=a,this.onDebug("Connected to: "+this.conn.peer),this.onDebugStatusUpdate("Connected to: "+this.conn.peer),this.conn.on("data",function(a){this.onDebug("Data recieved[receiver]: "+a);this.onPeerDataReceived(a)}),this.conn.on("close",function(){this.onDebug("Connection closed");this.onWarningStatusUpdate("Connection closed");this.onConnectionClosed();this.conn=null})});this.peer.on("disconnected",function(){this.onDebug("Connection disconnected");
this.onWarningStatusUpdate("Connection disconnected");this.onDisconnected();this.peer.id=this.lastPeerId;this.peer._lastServerId=this.lastPeerId;this.userClosedConn||this.peer.reconnect();this.connected=!1});this.peer.on("close",function(){this.conn=null;this.onDebug("Connection closed");this.onWarningStatusUpdate("Connection closed")});this.peer.on("error",function(a){this.onDebug(a.message);this.onErrorStatusUpdate(a.message)})};
_CursR_.prototype.initSender=function(){this.peer=new Peer(null,{debug:2});this.peer.on("open",function(a){null===this.peer.id?(this.onDebug("Received null id from peer open"),this.peer.id=this.lastPeerId):this.lastPeerId=this.peer.id;this.onDebug("ID: "+this.peer.id);this.onDebugStatusUpdate("Connected: "+this.peer.id)});this.peer.on("connection",function(a){a.on("open",function(){a.send("Sender does not accept incoming connections");setTimeout(function(){a.close()},500)})});this.peer.on("disconnected",
function(){this.onDebug("Connection disconnected");this.onWarningStatusUpdate("Connection disconnected");this.onDisconnected();this.peer.id=this.lastPeerId;this.peer._lastServerId=this.lastPeerId;this.userClosedConn||this.peer.reconnect()});this.peer.on("close",function(){this.conn=null;this.onDebug("Connection closed");this.onWarningStatusUpdate("Connection closed");this.onConnectionClosed()});this.peer.on("error",function(a){this.onError(a.message);this.onErrorStatusUpdate(a.message)})};
_CursR_.prototype.joinPeer=function(a){this.joined||(this.conn&&this.conn.close(),this.conn=peer.connect(a,{reliable:!0}));this.conn.on("open",function(){this.joined=!0;this.onDebug("Connected to: "+this.conn.peer);this.conn.send(JSON.stringify("Hello from Austria!"));this.onDebug("Sent: Hello from Austria!");this.onDebugStatusUpdate("Connected to: "+this.conn.peer)});this.conn.on("data",function(a){this.onDebug("Data received[sender]: "+a)});this.conn.on("close",function(){this.onDebug("Connection closed");
this.onWarningStatusUpdate("Connection closed");this.joined=!1})};_CursR_.prototype.sendData=function(a){if(null!=this.conn)if(this.joined)try{this.conn.send(JSON.stringify(a)),this.onDebug("Sent: "+JSON.stringify(a))}catch(b){this.onError(b.message),this.onErrorStatusUpdate(b.message)}else this.onError("Peer is not connected"),this.onWarningStatusUpdate("Peer is not connected");else this.onError("No connection"),this.onWarningStatusUpdate("No connection")};
_CursR_.prototype.onPeerDataReceived=function(a){"function"===typeof this._onPeerDataReceived&&this._onPeerDataReceived(a)};_CursR_.prototype.onConnectionClosed=function(){"function"===typeof this._onConnectionClosed&&this._onConnectionClosed()};_CursR_.prototype.onDisconnected=function(){"function"===typeof this._onDisconnected&&this._onDisconnected()};_CursR_.prototype.onDebug=function(a){"function"===typeof this._onDebug&&this._onDebug(a)};
_CursR_.prototype.onWarning=function(a){"function"===typeof this._onWarning&&this._onWarning(a)};_CursR_.prototype.onError=function(a){"function"===typeof this._onError&&this._onError(a)};_CursR_.prototype.onDebugStatusUpdate=function(a){"function"===typeof this._onDebugStatusUpdate&&this._onDebugStatusUpdate(a)};_CursR_.prototype.onWarningStatusUpdate=function(a){"function"===typeof this._onWarningStatusUpdate&&this._onWarningStatusUpdate(a)};
_CursR_.prototype.onErrorStatusUpdate=function(a){"function"===typeof this._onErrorStatusUpdate&&this._onErrorStatusUpdate(a)};var peer=null,lastPeerId=null,peerId=null,connected=!1,conn=null,userClosedConn=!1,joined=!1,_onPeerDataReceived=null,_onConnectionClosed=null,_onDisconnected=null,_onDebug=null,_onWarning=null,_onError=null,_onDebugStatusUpdate=null,_onWarningStatusUpdate=null,_onErrorStatusUpdate=null;function disconnectPeer(){peer&&(userClosedConn=!0,peer.disconnect())}
function onPeerDataReceived(a){"function"===typeof _onPeerDataReceived&&_onPeerDataReceived(a)}function onConnectionClosed(){"function"===typeof _onConnectionClosed&&_onConnectionClosed()}function onDisconnected(){"function"===typeof _onDisconnected&&_onDisconnected()}function onDebug(a){"function"===typeof _onDebug&&_onDebug(a)}function onWarning(a){"function"===typeof _onWarning&&_onWarning(a)}function onError(a){"function"===typeof _onError&&_onError(a)}
function onDebugStatusUpdate(a){"function"===typeof _onDebugStatusUpdate&&_onDebugStatusUpdate(a)}function onWarningStatusUpdate(a){"function"===typeof _onWarningStatusUpdate&&_onWarningStatusUpdate(a)}function onErrorStatusUpdate(a){"function"===typeof _onErrorStatusUpdate&&_onErrorStatusUpdate(a)}
function initReceiver(){var a=document.getElementById("cursr-host-connection-id");peer=new Peer(a.innerHTML,{debug:2});peer.on("open",function(a){null===peer.id?(onDebug("Received null id from peer open"),peer.id=lastPeerId):lastPeerId=peer.id;onDebug("ID: "+peer.id);connected=!0;onDebug("Awaiting connection...");onDebugStatusUpdate("Awaiting connection...")});peer.on("connection",function(a){if(conn&&conn.open)a.on("open",function(){a.send("Already connected to another client");setTimeout(function(){a.close()},
500)});else conn=a,onDebug("Connected to: "+conn.peer),onDebugStatusUpdate("Connected to: "+conn.peer),conn.on("data",function(a){onDebug("Data recieved[receiver]: "+a);onPeerDataReceived(a)}),conn.on("close",function(){onDebug("Connection closed");onWarningStatusUpdate("Connection closed");onConnectionClosed();conn=null})});peer.on("disconnected",function(){onDebug("Connection disconnected");onWarningStatusUpdate("Connection disconnected");onDisconnected();peer.id=lastPeerId;peer._lastServerId=lastPeerId;
userClosedConn||peer.reconnect();connected=!1});peer.on("close",function(){conn=null;onDebug("Connection closed");onWarningStatusUpdate("Connection closed")});peer.on("error",function(a){onDebug(a.message);onErrorStatusUpdate(a.message)})}
function initSender(){peer=new Peer(null,{debug:2});peer.on("open",function(a){null===peer.id?(onDebug("Received null id from peer open"),peer.id=lastPeerId):lastPeerId=peer.id;onDebug("ID: "+peer.id);onDebugStatusUpdate("Connected: "+peer.id)});peer.on("connection",function(a){a.on("open",function(){a.send("Sender does not accept incoming connections");setTimeout(function(){a.close()},500)})});peer.on("disconnected",function(){onDebug("Connection disconnected");onWarningStatusUpdate("Connection disconnected");
onDisconnected();peer.id=lastPeerId;peer._lastServerId=lastPeerId;userClosedConn||peer.reconnect()});peer.on("close",function(){conn=null;onDebug("Connection closed");onWarningStatusUpdate("Connection closed");onConnectionClosed()});peer.on("error",function(a){onError(a.message);onErrorStatusUpdate(a.message)})}
function joinPeer(a){joined||(conn&&conn.close(),conn=peer.connect(a,{reliable:!0}));conn.on("open",function(){joined=!0;onDebug("Connected to: "+conn.peer);conn.send(JSON.stringify("Hello from Austria!"));onDebug("Sent: Hello from Austria!");onDebugStatusUpdate("Connected to: "+conn.peer)});conn.on("data",function(a){onDebug("Data received[sender]: "+a)});conn.on("close",function(){onDebug("Connection closed");onWarningStatusUpdate("Connection closed");joined=!1})}
function sendData(a){if(null!=conn)if(joined)try{conn.send(JSON.stringify(a)),onDebug("Sent: "+JSON.stringify(a))}catch(b){onError(b.message),onErrorStatusUpdate(b.message)}else onError("Peer is not connected"),onWarningStatusUpdate("Peer is not connected");else onError("No connection"),onWarningStatusUpdate("No connection")};
